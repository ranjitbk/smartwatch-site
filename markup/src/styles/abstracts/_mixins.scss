// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

// --
//  @param {$fontfamily} - font family name
//  @param {$filename} - file name in 'fonts' folder (e.g. my-web-font.woff)
//  @param {$fontweight} - @default: normal;
//  @param {$fontstyle} - @default: normal;
//
//  NOTE: used only woff, because in supported in all browsers:
// --

@mixin fontface($fontfamily, $filename, $fontweight: normal, $fontstyle: normal) {
  @font-face {
    font-family: $fontfamily;
    src: url('#{$base-font-path}/#{$filename}.woff') format('woff');
    font-display: swap;
    font-weight: $fontweight;
    font-style: $fontstyle;
  }
}

/// Mixin helping defining both `width` and `height` simultaneously.
///
/// @author Hugo Giraudel
///
/// @access public
///
/// @param {Length} $width - Element’s `width`
/// @param {Length} $height ($width) - Element’s `height`
///
/// @example scss - Usage
///   .foo {
///     @include size(10em);
///   }
///
///   .bar {
///     @include size(100%, 10em);
///   }
///
/// @example css - CSS output
///   .foo {
///     width: 10em;
///     height: 10em;
///   }
///
///   .bar {
///     width: 100%;
///     height: 10em;
///   }
///
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

/// font-smothing
/// @include font-smoothing(on);
/// @include font-smoothing(off);
@mixin font-smoothing($value: on) {
  @if $value == on {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  } @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

/// Hides the text in an element, commonly used to show an image. Some elements will need block-level styles applied.
///
/// @link http://zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement
///
/// @example scss - Usage
///   .element {
///     @include hide-text;
///   }
///
/// @example css - CSS Output
///   .element {
///     overflow: hidden;
///     text-indent: 101%;
///     white-space: nowrap;
///   }
///
@mixin hide-text {
  overflow: hidden;
  text-indent: 101%;
  white-space: nowrap;
}

/// Transition css properties
// usage
// scss - @include transition(color);
//     or @include transition(color, 1s, ease-in);
//     or @include transition(color width);
//     or @include transition(color width, 1s, linear);
//

@mixin transition($properties, $duration: $transition-duration-base, $easing: $transition-easing-base) {
  $list: ();
  @each $prop in $properties {
    $str: #{$prop} #{$duration} #{$easing};
    $list: join($list, #{$str}, comma);
  }
  transition: $list;
}

/// Mixin for styling form-placeholders
/// @example scss - Usage
///   @include placeholder {
///    color: #333;
///   }
///
///   input[type='text'],
///   input[type='tel'],
///   input[type='email'] {
///     @include placeholder {
///      color: red;
///     }
///   }

@mixin placeholder {
  &::placeholder {
    @content;
  }
}

/// Font-size px to rem calc
/// @example scss - Usage
/// selector {
///    @include rem-font-size(16px);
/// }

@mixin rem-font-size($px-size, $basesize: 16) {
  // sass-lint:disable no-duplicate-properties
  font-size: ($px-size / #{$basesize}px) + rem;
}

@function url-friendly-colour($hex-bg-color) {
  @return '%23' + str-slice('#{$hex-bg-color}', 2, -1);
}

@mixin chevron-right($color) {
  $bg: str-replace($color, '#', '');
  background-image: url('data:image/svg+xml,%3Csvg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 640"%3E %3Cpath fill="#{url-friendly-colour($color)}" d="M240.708 17.489c23.063 22.512 248.395 259.044 248.395 259.044 12.304 12.083 18.484 27.808 18.484 43.533s-6.179 31.449-18.484 43.422c0 0-225.333 236.644-248.395 259.044-23.063 22.512-64.554 24.056-89.107 0-24.607-23.946-26.539-57.436 0-86.845l206.739-215.622-206.739-215.623c-26.539-29.409-24.608-62.954 0-86.955 24.552-24.056 66.044-22.567 89.107 0z"%3E%3C/path%3E %3C/svg%3E');
}

//  https://www.smashingmagazine.com/2015/06/responsive-typography-with-sass-maps/
//
//  $breakpoints: (
//    small : 480px,
//    medium: 700px,
//    large : 1024px
//  );
//
//  $p-font-sizes: (
//    null  : (15px, 1.3),
//    small : 16px,
//    medium: (17px, 1.4),
//    900px : 18px,
//    large : (19px, 1.45),
//    1440px: 20px,
//  );

@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      @include make-font-size($fs-font-size);
    }
    @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        @include make-font-size($fs-font-size);
      }
    }
  }
}

// Utility function for mixin font-size
@mixin make-font-size($fs-font-size) {
  // If $fs-font-size is a list, include
  // both font-size and line-height
  @if type-of($fs-font-size) == 'list' {
    font-size: nth($fs-font-size, 1);
    @if (length($fs-font-size) > 1) {
      line-height: nth($fs-font-size, 2);
    }
  }
  @else {
    font-size: $fs-font-size;
  }
}
